# Angular vs React vs Vue
  Angular
  - cross platform
    어떤 플랫폼이든지 하나의 코드 베이스로 결과물을 냄 
  - Angular framework내에서 웹에 필요한 전반적인 모든 기능을 제공해주는 구조
  Vue
  - The progressive JavaScript Framework
    'view를 다루는 라이브러리처럼 사용할 수도 있고 여러가지 기능이 통합된 framework처럼 사용할 수도 있다'라는 의미
  React
  - A JavaScript library for building user interfaces
    view를 다루는 라이브러리 
    only rendering & update, not included another functionality (ex http client, ..)

# component based development
  - 독립적인 코드 블럭(html + css + js)
  - 작업의 단위
  - <component명 prop명=값 />
    prop으로 컴포넌트 내에 데이터를 넣어주고
    컴포넌트 내에서는 이를 가지고 html + css + js를 합쳐서 화면에 어떻게 보여줄지 정의
  - componet tree == dom tree 
    dom tree는 브라우저에서 제공하는 html태그로 이루어져 있다면 component tree는 내가 만든 component로 이루어져 있다
# virtual DOM  
  - DOM을 직접 제어하는 경우 
    바뀐 부분만 정확히 바꿔야 한다 (jquery)
  - DOM을 직접 제어하지 않은 경우 
    state change -> compute diff -> Re-render
      - compute diff
        가상 돔 트리를 이용해서 이전 상태와 이후 상태를 비교하여 바뀐 부분을 찾아낸다
      - Re-render
        바뀐 부분과 그의 하위까지 자동으로 변경한다
  - react에서는 dom을 직접 제어하지 않는다

# JSX
  - not templates
  - transpile to js (babel, typescript)

# CSR & SSR (클라이언트 사이드 랜더링 & 서버 사이드 랜더링)
  - CSR
    1. server sending and response to brower 
       웹서비스에 접속하면 빈 html문서를 다운받음
    2. brower download js  
    3. brower execute react
    4. page now viewable and interactable
    => js가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행되기 전까지는 화면이 보이지 않음
       js가 전부 다운로드되어 리액트 애플리케이션이 정상 실행된 후 화면이 보이면서 인터렉션이 가능
  - SSR
    1. server sending ready to be rendered html and response to brower
    2. brower render the page, now viewable, and brower download js
    3. brower execute react
    4. page now interactable
    => js가 전부 다운로드되지 않아도 일단 화면은 보이지만 유저가 사용할 수 없음
       js가 전부 다운로드 되어 리액트 애플리케이션이 정상 실행된 후 유저가 사용가능

  - 리엑트는 기본적으로 클라이언트 사이드 랜더링을 따른다

///////////////////////////////////////////////////////////////////////////////////////////////////

# react 개발환경
  Node.js
    - installer
      공식 홈페이지에서 설치파일을 다운받고 실행
    - nvm (node version manager)
      노드 버전을 변경할 수 있다

      nvm install 14.16.1 -> 버전 설치
      nvm use 14.16.1 -> 버전 변경
      nvm alias default 14.16.1 -> default 버전 설정
  brower(chrome)
  git
  vsCode

/////////////////////////////////////////////////////////////////////////////////////////////////

# react 라이브러리
  react 핵심 모듈
    - react-dom 모듈
      리액트 컴포넌트를 html element와 연결하는 역할

      ReactDOM.render(
        // reactDOM의 render함수: 컴포넌트를 html element와 연결 -> 'dom에 해당 컴포넌트를 그려라'
                                  react application의 시작 지점 (프로그램의 시작함수인 main과 같은 역할)
        <HelloMessage name="Anana" />     =>     document.getElementById('hello-example')
      )

      class HelloMessage extends React.Componet {
        render() {
          return (
            <div>
              Hello {this.props.name}
            </div>
          )
        }
      }

    - react 모듈
      리액트 컴포넌트 만드는 역할

    - import
      import ReactDOM from 'react-dom';
      import React from 'react';

      => import구문은 es6방식
        node.js에서 모듈을 가져다 쓸때는 require구문을 이용하는데 react에서 import구문을 사용할 수 있는 이유는 webpack을 통해 변경되기 때문이다
        js에서 라이브러리 사용할땐 스크립트를 추가해서 전역 객체를 끌어다 사용한다
        import구문으로 모듈을 가져와 사용하는 것은 그냥 자바스크립트로 해결안됨 -> webpack이나 bundler를 사용 
  
  use React, ReactDOM library
    - CDN
      스크립트 파일을 추가해서 전역객체를 사용하는 방법
      https://reactjs.org/docs/cdn-links.html

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# 프론트 개발방법
  - html로 구조를 잡고 css로 스타일을 적용하고 js로 dom을 조작하는 방식
  - react를 사용하지 않고 component를 활용하는 방식
  - react를 이용하는 방식





* npx serve
  폴더를 마치 파일서버처럼 운영할 수 있는 명령어
  http://localhost:5000으로 파일로 서빙하는 웹 서버가 열린다