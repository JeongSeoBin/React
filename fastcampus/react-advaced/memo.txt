# reconciliation (App.js)
- 랜더 전후의 일치여부를 판단하는 규칙

- 서로 다른 앨리먼트이거나 다른 컴포넌트인 경우
  -> 서로 다른 타입의 두 앨리먼트(컴포넌트)는 서로 다른 트리를 만든다
  -> 컴포넌트를 업데이트하는 것이 아니라 컴포넌트가 사라지고 새로 생성된다
- 같은 앨리먼트 다른 attribute
  -> 서로 다른 attribute만 바뀐다
- 같은 컴포넌트 다른 props
  -> 업데이트되어 재랜더링
- 개발자가 key prop을 통해 여러 렌더링 사이에서 배열 요소 중 어떤 자식 엘리먼트가 변경되지 않아야 할지 표시해 줄 수 있다


# optimizing performance (App2.js)
- 필요할때만 랜더한다

- 이벤트 props 지정시 재랜더링 방지
  - 이벤트 props에 이벤트 함수를 인라인 방식으로 정의하면 최적화하여도 함수가 계속 재정의되어 재랜더링된다
  - 클래스형 컴포넌트 경우 arrow function으로 따로 정의하여 지정
  - 함수형 컴포넌트 경우 arrow function을 정의 후 필요할때만 정의하도록 useCallback으로 최적화
    (이벤트 함수를 function키워드를 이용하여 정의하고 props에 넣게 되면 인라인방식과 다를게 없다)

- 이전 상태와 비교했을때 변경사항이 없는 경우 랜더링하지 않는다
  - 클래스형 컴포넌트 경우 pure component를 상속받아 컴포넌트를 정의한다
  - 함수형 컴포넌트 경우 컴포넌트를 React.memo()로 감싼다


# React.createPortal (App3.js Modai.jsx index.html)
- 리액트의 랜더 영역 밖에 있는 dom에 컴포넌트를 랜더할 수 있는 기능
- modal창을 만드는 경우 root가 아닌 div에 modal을 랜더할 수 있다


# React.forwardRef (App4.js MyInput.jsx)
- 하위 컴포넌트의 ref를 상위 컴포넌트에서 이용할 수 있다
- 상위 컴포넌트에서 넘겨 주는 ref는 props로 넘겨 받을 수 없고 다른 방법이 필요하다 -> React.forwardRef()
- 하위 컴포넌트를 forwardRef()로 감싸면 첫번째 인자에는 props, 두번째 인자에는 ref가 들어온다
  React.forwardRef(function comp(props, ref){})

