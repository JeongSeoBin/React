https://helloinyong.tistory.com/325

# eslint
여러 방식의 코드 작성법이 있는데 일관성있는 방식으로 구현할 수 있도록 잡아주는 것

# eslint 세팅
npm으로 설치한 eslint와 eslint extension은 린트환경을 세팅해주는 모듈이고 실제로 코드를 검사하느 것은 플러그인을 별도로 설치헤서 eslintrc파일에 설정해야함

- 설치
  npm install -D eslint

- eslint extension 설치
  내부에서 eslint검사를 실행하여 코드상에 에러 표시와 에러 메세지를 표시
  eslint가 프로젝트 코드단에서 사용하는 것이 아니라 vscode에 적용해서 사용하는 것이다 보니, eslint extension과 eslint library 모두 설치 및 세팅되어야 한다

- .eslintrc.js 파일 생성
  node_modules/.bin/eslint --init

  * eslintrc.js 파일
    - root
      default는 true
      true가 아니면 eslintrc 파일을 찾을때 해당 프로젝트 디렉토리뿐 아니라 내 pc의 root파일 시스템 root 디렉토리까지 eslint를 찾는다
    - plugins, parser
      프로젝트에 필요한 플러그인을 npm으로 설치하고 해당 플러그인을 plugins에 추가하여 사용
      특정 플러그인을 사용한다면 해당 플러그인에서 제공하는 parser를 설정
      
      플러그인 종류
      eslint-config-airbnb-base: 에어비엔비 린트 플러그인
      eslint-config-next: Next.js 전용 린트 플러그인
      eslint-plugin-react: 리액트 전용 플러그인
      eslint-plugin-prettier: 린트 위에 사용할 프리티어 플러그인
      eslint-config-prettier: 요건 린트 설정과 중복되는 부분이 있으면 프리티어 룰에서 제외하는 플러그인
      @typescript-eslint/eslint-plugin: : 타입스크립트 전용 린트

    - extends
      eslint rule설정이 저장되어 있는 외부 파일을 extends
      예를들어 "eslint:recommended", "plugin:react/recommended"를 설정하면 해당 플러그인에서 기본적으로 제공하는 rule set이 적용된다
    - rules
      직접 lint rule을 적용
      extends에서 자동으로 설정된 rule 중 특정 rule을 끄는 등 설정을 바꿀 수 있다

# cra에서 eslint 사용하기
- cra에 eslint가 기본적으로 설치되어 있다
- package.json이 .eslintrc.js와 같은 역할을 한다
  "eslintConfig": {
    "extends": [
      "react-app", // 'eslint-config-react-app'라이브러리인데 'eslint-config'가 생략됨. node_modules에서 해당 라이브러리 확인 가능
      "react-app/jest",
      "prettier" // 'eslint-config-prettier'라이브러리. prettier에서 불필요하다거나 prettier와 충돌할 수 있는 모든 규칙을 끈다 -> eslint의 기존 포메팅 기능을 없앤다
      "eslint-plugin-prettier" // eslint에서 prettier의 포메팅 기능을 추가한다
    ],
    "rules": {} // 더 추가하고 싶은 eslint 규칙이 있으면 여기에 추가
  }

# prettier
줄바꿈, 공백, 들여 쓰기 등 에디터에서 텍스트를 일관되게 작성하도록 도와주는 것

# prettier 세팅
prettier를 세팅하는 방법은 2가지가 있다
1. 별도의 prettier플러그인을 npm으로 설치하지 않고 vscode extension을 설치
   프로젝트 자체에 prettier룰을 세팅하는 것이 아니라 eslint처럼 현재 내가 쓰고 있는 vscode 에디터 자체에 prettier룰을 세팅하는 것
   따라서 내 환경의 vscode에서만 해당 prettier방식이 적용
2. prettier플러그인을 직접 설치 후 eslintrc에 세팅
   프로잭트 자체에 prettier룰을 세팅하는것으로 해당 프로젝트를 다릉 환경에서 돌려도 동일하게 prettier 룰이 적용

* vscode settings vs prettierrc
  - vscode settings는 현재 내 pc vscode환경에 대한 세팅이기 때문에 vscode extension으로 설치한 prettier플러그인에만 적용되고 npm으로 설치해서 세팅한 prettier플러그인에는 적용되지 않는다. 
    따라서 npm으로 prettier를 설치했다면 .prettierrc파일을 이용해야한다
  - prettier를 vscode extension으로 설치했다면 vscode settings에서도 설정할 수 있고 .prettierrc파일로도 설정이 가능하지만 .prettierrc파일이 있으면 vscode settings의 설정은 무시되고 prettierrc파일룰이 적용된다

1번 방법
- prettier-code formatter extesion설치
- vscode 설정 -> 사용자 -> prettier검색 -> prettier관련 설정을 할 수 있는 리스트들이 나타난다

2번 방법
- 설치
  npm install -D prettier
- eslint-config-prettier 설치 및 설정
  필요없거나 prettier와 충돌나는 eslint룰을 끄는 기능

  - 설치
    npm install --save-dev eslint-config-prettier
  - 설정
    .eslintre.js 파일의 extends부분에 "plugin:prettier/recommended" 추가
    {
        ...
        "extends": ["plugin:prettier/recommended"]
        ...
    }

    이 설정은 다음을 의미한다
    {
        "extends": ["prettier"], // eslint-config-prettier를 실제로 활설화시켜서 중복되는 룰을 끄도록 설정
        "plugins": ["prettier"], // prettier플러그인 등록
        "rules": {
            // eslint내 prettier가 돌아갈때 prettier규칙에 맞지 않는 요소들을 error로 판단하도록하는 설정
            "prettier/prettier": "error", 
            // eslint와 같이 사용하는 부분에 있어 내부적인 이슈가 있어서 임의로 두 설정을 끔
            "arrow-body-style": "off", 
            "prefer-arrow-callback": "off"
        }
    }
- .prettierrc파일에 룰 작성
        

# format on save
ctrl+shift+p -> open Settings.json(JSON) -> json파일 수정

- editor.codeActionOnSave
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  }
  => save할때 eslint 룰에 의해 에러로 판단되는 부분들을 lint 룰에 맞게 알아서 수정해주는 설정

- editor.formatOnSave
  {
    "editor.formatOnSave": true,
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  }
  => save할때 vscode extension으로 설정된 prettier환경에 맞게 코드를 수정해주는 설정
     에러를 수정하기보단 에디터에 올라와 있는 텍스트들을 prettier 룰에 맞게 정리

  



