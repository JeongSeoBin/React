hook 이전
컴포넌트 내부 상태가 있다면 -> class
컴포넌트 내부 상태가 없다면 -> 라이프사이클을 사용해야 한다면 -> class 
                            -> 라이프사이클과 관계없다면 -> function
hook 이후
hook 덕에 function 컴포넌트에서도 상태관리나 라이프사이클 사용이 가능해져 구분하여 사용하지 않음


# class 컴포넌트
// es6모듈 방식
import React from 'react';

// 정의
// React.ClassComponent 상속
class ClassComponent extends React.ClassComponent {
    render() {
        return (
            // jsx -> React.createElement()로 바뀜
            <div>hello</div>
        )
    }
}

// 사용
<ClassComponent />

# function 컴포넌트
// 정의
function FunctionComponent() {
    // jsx
    return <div></div>
}

const FunctionComponent = () => <div>Hello</div>

// 사용
<FunctionComponent/>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# React.createElement 
React.createElement(
    type, // 태그이름 | 리액트 컴포넌트명 | React.Fragement
    props, // 리액트 컴포넌트에 넣어 주는 데이터 객체
    children // 자식으로 넣어주는 요소들
)
- '<.. ..>..</>' 이 형태로 만들어줌
- 라이브러리를 활용한 순수 자바스크립트 문법 -> 한계가 있다 -> jsx

# jsx
- babel
  작성 코드(브라우저가 이해할 수 없는 상위 스펙 코드) -> 순수하게 실행할 수 있는 자바스크립트 (transpile)
  이 babel이 jsx코드를 순수 자바스크립트로 변환해준다
  즉, <태그 prop>children</>, <Component/> 형식 ->  React.createElement(태그/컴포넌트, prop, children)
  cdn 추가 후 사용 가능 https://babeljs.io/setup#installation
- 따라서 babel이 알아서 변환해주기 때문에 React.createElement()를 사용하지 않고 <태그 />, <Component/> 형식을 그대로 이용할 수 있다

- jsx 문법
  최상위 요소는 하나
  최상위 요소를 리턴하는 경우 ()로 감싸야한다
  자식들을 바로 랜더링 하고 싶은 경우 <></> fragment를 사용
  자바스크립트 표현식을 사용하고 싶으면 {표현식} 이용
  if문은 사용불가 -> 삼항연산자 혹은 && 사용
  style을 이용해 인라인 스타일링 가능
  class대신 className을 사용해 class를 적용
  닫는 태그가 반드시 있어야 한다

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
render  =====>  component  
                 props 
                 state
# props
- 컴포넌트 외부에서 컴포넌트에게 주는 데이터
- React.createElement의 두번째 인자 -> 함수형 컴포넌트일 경우 매개변수 props에 객체로 들어옴
                                    -> 클래스 컴포넌트일 경우 this.props로 꺼내 사용
- defaultProps
  컴포넌트명.defaultProps = {}  -> 함수형 컴포넌트, 클래스 컴포넌트 모두 적용가능
  클래스 컴포넌트 내 static defaultProps = {}  -> 클래스 컴포넌트에서만 적용가능

# state
- 컴포넌트 내부에서 변경할 수 있는 데이터
- 함수형 컴포넌트에서 state -> hook 이용
- 클래스 컴포넌트에서 state
  - state 정의
    - state는 항상 객체 형태이다
    - 클래스 내 state = {} 
    - 클래스 내 constructor(props) {
                    super(props)
                    this.state = {}
                }
  - state 상태 변경
    - state객체를 직접 변경하면 자동 재랜더링이 일어나지 않는다
    - setState()를 이용해야만 자동 재랜더링된다
    - this.setState({newState})
    - this.setState((prevState) => {                   =>  이전 상태를 이용하여 상태를 변경할 경우 이용
        return {newState}
      })

# render 함수
- 컴포넌트를 그리는 방법을 기술한 함수
- props와 state를 바탕으로 컴포넌트를 그린다
- props와 state가 변경되면 자동으로 컴포넌트를 다시 그린다

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# 이벤트 핸들링
html dom에 특정 이벤트가 발생하고 발생하면 그에 맞는 변경이 일어나도록 해야함
- jsx 이벤트
  <button onClick={() => {이벤트 처리}}>버튼</button>
  -> 이벤트명은 camelcase로 작성 (onClick)
  -> 이벤트명={함수} 형태로 작성
  -> 이벤트처리함수가 해당 이벤트의 이벤트핸들러로 등록됨

- 이벤트 처리함수
  - 화살표 함수로 작성한다.
    onClick() {...}형태로 작성하면 this를 bind 해야한다
    화살표 함수로 작성하면 알아서 this를 bind한다  

    * bind, apply, call
      함수 내 this를 작성하면 기본적으로 window객체를 가리키는데 bind, apply, call 함수가 함수 내 this 객체를 window객체가 아닌 다른 객체로 바꿔준다
      https://wooooooak.github.io/javascript/2018/12/08/call,apply,bind/ (apply, call, bind 차이점)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# Component Lifecycle
탄생(그려지는 순간)부터 죽음(사라지는 순간)까지 여러 지점에서 개발자가 작업이 가능하도록 메서드를 오버라이딩할 수 있다

- Declarative
  여러 지점을 선언적으로 표현하면 그 순간이 되었을때 해당 함수를 실행할 수 있음을 의미

  - (react version 16.3 이전)
    - initialization
      생성자를 호출했을때
      setup props and state
    - mounting
      componentWillMount(render 직전) -> 최초로 브라우저에 그려지는 시점(render) -> componentDidMount(render 직후)
     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< 초기화하고 브라우저에 그려짐 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
    - updation
      state
      - shouldComponentUpdate -> componentWillUpdate -> render -> componentDidUpdate
      props
      - componentWillReceiveProps -> shouldComponentUpdate -> componentWillUpdate -> render -> componentDidUpdate
     <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< state나 props가 변경되어 render함수를 다시 실행되기 전후 지점들 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
    - unmounting
      componentWillUnmount

    =>

    - componentWillUpdate(nextProps, nextState)
      컴포넌트가 재랜더링되기 직전에 불린다
      여기서 setState쓰면 안된다

    - componentWillReceiveProps(nextProps)
      props를 새로 지정했을때 바로 호출, state변경에는 반응하지 않는다
      props의 값에 따라서 state를 변경해야한다면, 다음 이벤트로 각각 가는게 아니라 한번에 변경
      (즉, props변경에 따른 shouldComponentUpdate, state변경에 따른 shouldComponentUpdate가 따로 실행되는게 아니라 합쳐져서 실행됨)


  - (react version 16.3 이후)
    - initialization
      componentWillMount -> getDerivedStateFromProps로 변경
      render
      componentDidMount
    - updation 
      componentWillReceiveProps -> getDerivedStateFromProps로 변경
      shouldComponentUpdate
      render
      componentWillUpdate -> getSnapshotBeforeUpdate로 변경
      (dom에 적용)
      componentDidUpdate
    - unmounting
      componentWillUnmount
  => 

  - static getDerivedStateFromProps(nextProps, prevState)
    마운트, 업데이트 시작 전에 호출하는 메서드
    전달받은 props에 따라 state를 변경할때
    새로운 state를 리턴, 리턴할 state가 없으면 null 리턴

  - componentDidMount
    컴포넌트가 브라우저 상에 나타난 후 호출되는 메소드
    라이브러리, 프레임워크 함수 호출, 이벤트 등록, 지연함수, 네트워크 요청, api요청과 같은 비동기 작업 처리

  - shouldComponentUpdate(nextProps, prevState)
    props만 변경되도 state만 변경되도 둘다 변경되도 실행
    업데이트하기 직전에 값을 참고할 일이 있을때
    컴포넌트를 리랜더링할지말지 결정
    return type이 boolean
    -> true이면 다음 라이프사이클 메서드 실행, false면 작업을 중지하여 랜더링을 진행안함
    -> default는 true
    -> 성능 최적화에 이용

  - componentDidUpdate(prevProps, prevState)
    컴포넌트가 재랜더링을 마치면 불린다

  - componentWillUnmount
    컴포넌트가 브라우저 상에서 사리지기 잔에 호출
    이벤트, 타이머, 직접 생성한 dom 제거 가능
    메모리 정리가능
    api요청 끊기

  - getSnapshotBeforeUpdate(prevProps, prevState)
    컴포넌트의 변화를 dom에 적용하기 직전에 호출
    이전 상태, 모습 등을 기억하고 싶을때

  - componentDidUpdate(prevProps, prevState, snapshot)
    컴포넌트 업데이트 작업이 끝난 후 dom관련 처리를 할 수 있다
    저장한 이전 모습(snapshot)을 활용하여 현재 모습을 변경할 수 있다

  - componentDidCatch
    컴포넌트 랜더링 중 에러가 발생했을때 오류 ui를 보여줄 수 있다
    error bounaries
    - 최상위 컴포넌트에 적용하여 하위 요소에 에러발생했을때 다른 화면을 보여 줄 수 있다
    - 자기자신의 에러는 잡지 못하므로 최상위에 적용해야한다
    - 라이브러리를 설치하여 적용하는 편