# hooks
클래스 컴포넌트에서만 가능했던 상태, 라이프사이클 관리를 함수형 컴포넌트에서 가능하게 도와줌
컴포넌트 상태와 관련된 로직을 재사용할 수 있다
함수형 컴포넌트나 hooks안에서만 사용가능하다

함수형 컴포넌트에 상태관리가 생긴 이유
클래스 컴포넌트에서의 상태관리는
- 컴포넌트 사이에 상태와 관련된 로직을 재사용하기 어렵다
  컨테이너 방식말고 상태와 관련된 로직
- 복잡한 컴포넌트들은 이해하기 어렵다
- 클래스는 사람과 기계를 혼동시킨다
  컴파일 단계에서 코드를 최적화하기 어렵게 만든다
- this.state는 로직에서 레퍼런스를 공유하기 때문에 문제가 발생할 수 있다

# useState
클래스 컴포넌트의 state를 대체할 수 있다
(Example1, 2, 3 component 참조)

# useEffect
클래스 컴포넌트의 라이프사이클을 대체할 수 있다
componentDidMount, componentDidUpdate, componentWillunmount
(Example4, 5 component 참조)

# useReucer
다수의 하윗값을 포함하는 복잡한 정적 로직을 만드는 경우 사용
다음 state가 이전 state에 의존적인 경우 사용
(Example6 component 참조)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

클래스 컴포넌트애서는 재랜더링할때 render() 메서드만 재실행하기 때문에 클래스 내에 있는 것들이 유지가 되지만
함수형 컴포넌트에서는 함수 내에 있는 것들을 새로 생성하기 때문에 재랜더링할때 유지해야 할 것들을 유지할 수 있게 도와줘야 한다
이를 수행항 수 있는 hooks

# useMemo
useMemo(() => {}, [])
dependency가 변경될때만 해당 함수 실행
리랜더링에 의해 불필요한 함수실행을 막을 수 있다
(Example7 component 참조)

# useCallback
useCallback(() => {}, [])
dependency가 변경될때만 해당 함수를 정의
(Example7 component 참조)

# useRef
createRef와 useRef의 차이점
- createRef: 랜더될때마다 새로운 래퍼런스를 만들어서 넣어준다
- useRef: 최초 랜더링할때 저장한 래퍼런스를 유지한다

(Example8 component 참조)

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# custom hooks
- 반복되는 로직을 hook으로 만들어 재사용할 수 있다
- state를 재활용할 수 있다 (useWindowWidth hook)

- hoc와 hook비교 (useHasMounted, withHasMounted)

# router hooks
useHistory
useLocation
useParams
useRoutermatch
