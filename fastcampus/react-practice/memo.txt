# HOC (Higher Order Component)
- HOC = function(component) { return new component } 
  컴포넌트를 인자로 받아 공통적, 재활용 가능한 로직을 추가하여 새로운 컴포넌트를 리턴하는 함수
- use HOC for Cross-Cutting-Concerns
  * Cross-Cutting-Concerns (횡단 관심사)
    페이지 모두 어떤 시점에 비슷한 일을 하는데 이런 시점을 묶은 것
    예) 인증확인 -> 페이지 방문시 회원 인증에 따라 해당 페이지를 보여주지 않은 일은 여러 페이지에서 일어날 수 있는 일. 이런 일을 횡단 관심사로 묶을 수 있다
    예) 로깅 -> 프로그램 어딘가에서 페이지를 갈때 로깅하는데 이때 로깅행위는 여러 페이지에서 비슷한 시점에 일어난다. 이러한 로깅들을 모아서 로깅기능을 따로 분리하여 여러 페이지에서 가져다 씀
- HOC 기능을 대체할 HOOK이 존재

예시
- React readux의 connect()
- Relay의 Fragment Container
- withRouter(컴포넌트): 인자로 받은 컴포넌트에게 props를 넣어준 새로운 컴포넌트를 리턴

사용하는 법
- 리액트 컴포넌트를 상속받거나 재활용 방식이 아닌 "조합하는 방식 혹은 패턴"
  -> 오리지널 컴포넌트( HOC인자로 들어가는 컴포넌트 )는 변경하지 않는다
- pass unRelated props through to the wrapped component
  withRouter()를 예로 들면 withRouter()에 의해 만들어진 props와 실제 넘겨 받은 props가 있을 텐데 이 둘이 서로 오염시키지 않는 것을 의미
- hoc에 의해 새로 만들어진 컴포넌트는 hoc에 의해 만들어진 컴포넌트라는 것을 디스플레이 이름에 표시

주의할 점
- hoc는 render 메소드 안에서 사용하면 안된다
  -> render할때마다 새 컴포넌트가 만들어지기 때문

  render() {
    const EnhancedComponent = enhance(myComponent)
    return <EnhancedComponent />
  }

- 인자로 들어간 컴포넌트의 static 메서드는 복사되지 않기 때문에 새로 리턴할 메서드에 따로 복사해서 넣어줘야 한다

    WrappedComponent.staticMethod = function() {}
    const EnhancedComponent = enhance(WrappedComponent)

    typeof EnhancedComponent.staticMethod === 'undefined' //true: EnhancedComponent에는 static 메소드가 없다
    ///////////////////////////////////////////////////////////////////////////////////////////////////////

    따라서 static 메서드를 따로 넣어줘야 한다
    function enhance(WrappedComponent) {
        class Enhance extends React.Component {}
        Enhance.staticMethod = WrappedComponent.staticMethod
        return Enhance
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////

    라이브러리를 이용할 수 도 있다
    import hoistNonReactStatic from 'hoist-non-react-statics'

    function enhance(WrappedComponent) {
        class Enhance extends React.Component {}

        // WrappedComponent의 static메서드를 Enhance메서드에 복사해주는 함수
        hoistNonReactStatic(Enhance, WrappedComponent)
    }

- refs aren't passed through 
  대신 React.forwardRef를 이용해야 한다


# Controlled component와 Uncontrolled component
상태를 가지고 있는 element ( input, select, textarea, .. )

Controlled component
- element를 가지고 있는 컴포넌트가 element의 상태를 관리
- 컴포넌트 내부에 상태가 있고 그 상태와 element의 상태가 sync로 같은 상태를 유지
  -> element의 상태를 읽어서 보여주고 element가 변하면 state를 변경하여 다시 render

Uncontrolled component
- 컴포넌트는 element의 상태를 관리하지 않고 element의 참조만 소유
- inputRef = React.createRef() // 참조값 저장
  <input ref={this.inputRef} /> // inputRef가 input의 참조값을 저장하게 됨
  -> element의 참조값을 저장하면서 element의 상태가 변경될때마다 참조해서 그때의 값을 가져온다

차이점
매번 state가 변경하는 상황에 따라 ui를 변경하고 싶다 -> controlled component
예를들어 비밀번호 조건에 맞지 않는 비밀번호를 입력하고 있을때 빨간색으로 변경

실제 element를 건드리고 싶다 -> uncontrolled component
예를들어 element에 focus를 두고 싶을때