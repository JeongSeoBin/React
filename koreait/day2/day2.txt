컴포넌트 파일의 확장명을 .jsx로 변경하하여 .js파일과 구분한다
.js파일은 node에서 실행하는 파일이며 .jsx는 ui를 구성하는 컴포넌트 파일


jsx 태그에 스타일과 css클래스를 설정하는 방법


props
* props를 통해 컴포넌트에게 값을 전달하는 방법
<컴포넌트명 속성명1=값1 속성명2=값2/>

function 컴포넌트명(props){
    "props.속성명"으로 사용
}
또는
function 컴포넌트명({속성명1, 속성명2}){
    "속성명"으로 사용
}
=> 비구조화 할당
   객체 안에 있는 값을 추출해서 변수 혹은 상수에 저장
   const student = {'apple':'김사과', 'orange':'오렌지'}
   const {apple, orange} = student
   const users = ['김사과', '반하나'];
   const [kim, ban] = users;

* 컴포넌트가 값을 전달받지 못했을때 기본값 설정하는 방법
컴포넌트명.defaultProps = {
    설정할 내용
}

* 컴포넌트 태그 사이에 넣은 값을 조회하는 방법
function 컴포넌트명({children}){
    return (
        <div>
            {children}
        </div>
    )
}


조건부 랜더링
특정 조건에 따라 결과물을 랜더링하는 것을 의미
- 삼항연산자를 이용
  {조건식 ? true인 경우 : false인 경우}
  조건식이 true인 경우와 false인 경우 모두 표현
- &&연산자를 이용
  {조건식 && true인 경우}
  조건식이 true인 경우만 표현


Hooks
상태관리를 다루던 클래스를 더 쉽게 다룰 수 있도록 만들어진 함수

리엑트 16.8버전부터 hooks라는 기능이 도입되면서 함수형 컴포넌트에서도 상태를 관리할 수 있게 되었습니다. 원래 함수형 컴포넌트는 정적인 컴포넌트만 만들다가 상태관리, 랜더링, 프로젝트 관리와 같은 클래스형 컴포넌트에만 있던 기능이 추가되었습니다.

컴포넌트를 만드는 방법
          class           function
        상태관리(o)     상태관리(x) -> 리엑트 16.8버전부터 가능하게 됨

useState hooks
컴포넌트에서 동적인 값의 상태를 다루는 Hook함수
const [현재 상태변수, 설정함수] = useState(초깃값)
설정함수로 상태를 변경시킬 시 전체화면을 갱신한다

리액트 객체 상태 수정
setUsers({
  ...users,
  [name]: value
})
=> 불변성을 지켜줘야만 리엑트 컴포넌트에서 상태가 업데이트가 됐음을 감지할 수 있고 이에 따라 필요한 리렌더링이 진행
inputs[name] = value 이런식으로 기존 상태를 직접 변경하면 값이 바뀌어도 리랜더링이 일어나지 않습니다
새로운 객체를 만들어서 새 객체에 변화를 줘야합니다

* spread
객체 또는 배열을 펼쳐 저장할 수 있음
const dog = {
  name: '루시'
}

const cuteDog = {
  ...dog,
  age: 10
}
=> name과 age 속성을 가짐

const WhiteCuteDog = {
  ...cuteDog,
  color:'white'
}
=> name과 age와 color 속성을 가짐


useRef hooks
1. DOM에 직접 접근
2. 컴포넌트 안에서 조회 및 수정할 수 있는 변수를 관리
상태를 변경하는 함수호출 후 렌더링 이후 업데이트된 상태 조회 가능
 const 상수명 = useRef(초깃값)
상수명.current를 이용하여 조회 및 수정
- setTimeout(), setInterval()을 통해서 만들어진 id
- 외부 라이브러리를 사용하여 생성된 인스턴스
- scroll위치


useEffect hooks
컴포넌트가 마운트됐을때(처음 나타났을때), 언마운트 됐을때(사라질 때), 그리고 업데이트될때(특정 props가 바뀔때) 특정 작업을 처리할 수 있습니다

컴포넌트 마운트시 할 수 있는 작업
- db연결이나 소켓 연결
- props로 받은 값을 컴포넌트의 로컬상태로 설정
- 외부 api요청(rest api 등,,)
- 라이브러리 사용
- setInterval를 통한 반복작업 또는 setTimeout을 통한 작업 예약

컴포넌트 언마운트시 할 수 있는 작업
- db연결해제 혹은 소켓연결 해제
- 라이브러리 인스턴스 제거
- setInterval, setTimeout을 사용하여 등록한 작업을 clear할때

useEffect(() => {
  ...
  return () => {} //cleanup함수
}, 배열)
배열: 의존값이 들어 있는 배열
만약 배열을 비우게 된다면 컴포넌트가 처음 나타날때만 useEffect()에 등록한 함수가 호출, 배열이 비어있지 않으면 배열이 바뀔때, 컴포넌트가 처음 나타날때 useEffect()에 등록한 함수가 호출

clenaup 함수
useEffect()에서 반환한 함수
useEffect에 대한 뒷정리하는 함수
deps가 비어있는 경우에 컴포넌트가 사라질때 clenaup함수가 호출된다
deps가 비어있지 않은 경우에는 컴포넌트가 바뀔때, 사라질때 호출된다

배열이 없는 경우
- 마운트시
  useEffect애 등록된 함수 호출
- 언마운트시
  cleanup함수 호출

배열이 있는 경우
- 마운트시
  useEffect애 등록된 함수 호출
- 배열이 바뀔때
  cleanup함수 호출 후 useEffect에 등록된 함수 호출
- 언마운트시
  cleanup함수 호출


성능을 최적화하는 Hook함수
성능을 최적화하는 작업은 다 만든 후 하나씩 최적화시키는 방식으로 하는 것이 좋음
useMemo hooks
성능 최적화를 위해 연산된 값을 재사용
부분 랜더링을 위함
useMemo(함수, deps)
deps가 변경될때만 등록된 함수 실행

useCallback hooks
성능 최적화를 위해 사용하는 Hook함수
useCallback(함수, deps)
deps가 변경될때만 등록된 함수를 생성, deps가 변경되지 않으면 기존 함수 재활용

React.memo
컴포넌트의 리랜더링 성능을 최적화 해주는 hook함수
export default React.memo(컴포넌트명)


useReducer hooks
상태업데이트 로직을 컴포넌트에서 분리시킬 수 있음
상태업데이트 로직을 다른 파일에 작성 후 불러와서 사용할 수도 있음
const [state, dispatch] = useReducer(reducer, initialState);
state: 상태
dispatch: 액션을 발생시키는 함수
reducer: 액션에 따른 처리를 하는 함수