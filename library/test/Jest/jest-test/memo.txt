# Jest
- javascript testing framework
- cra default로 설정되어 있음
- facebook의 오픈소스
- instant feedback  
   고친 파일만 빠르게 테스트 다시 해주는 기능
- snapshot testing
  컴포넌트 테스트에 유용한 역할을 함


# 테스트 실행
- package.json
  "scripts": {
    "test": "jest"
  },

- npm jest
test.js 파일을 알아서 찾아 테스트하여 결과를 도출한다

- npx jest --watchAll
항상 테스트 켜놓고 파일을 수정할때마다 다시 테스트를 실행


# 테스트 코드 작성
describe('', () => {
    test('', () => {
        expect("테스트하려는 데이터").to()
    })
})

1. describe('', () => {})
- 여러 테스트 코드를 하나의 분야로 묶음
2. test('', () => {})
- it('', () => {})로 대체 가능
- 하나의 테스트 코드
3. 테스트 코드
- expect()인수 값을 'to'로 시작하는 함수를 통해 의도에 따라 테스트할 수 있다


# 비동기 로직 테스트
- async test with done callback
describe('use async test' () => {
    it('setTimeout without done', () => {
        setTimeout(() => {
            expect(37).toBe(36)
        }, 1000)
    })

    it('setTimeout with done', done => {
        setTimeout(() => {
            expect(37).toBe(36);
            // done()을 실행하기 전까지 끝나지 않는다
            done();
        }, 1000)
    })
})

- async test with promise
1.
describe('use async test', (0 => {
    it('promise then', () => {
        function p() {
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve(37)
                }, 1000)
            })
        }

        // return 해야 promise가 리턴되기 전 테스트 코드를 수행할 수 있다
        return p().then(data => expect(data).toBe(37))
    })

    it('promise catch', () => {
        function p() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject(new Error('error'))
                }, 1000)
            })
        }

        return p().catch(e => expect(e).toBeInstanceOf(Error))
    })
}))

2.
describe('use async test', (0 => {
    it('promise .resolves' () => {
        function p() {
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve(37)
                }, 1000)
            }
        }

        return expect(p()).resolves.toBe(37)
    })

    it('promise .rejects' () => {
        function p() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject(new Error('error'))
                }, 1000)
            }
        }

        return expect(p()).rejects.toBeInstanceOf(Error)
    })
}))

3.
describe('use async test' () => {
    it('asyc-await', async () => {
        function p() {
            return new Promise(resolve => {
                setTimeout(() => {
                    resolve(37)
                }, 1000)
            })
        }

        const data = await p();
        return expect(data).toBe(37)
    })
})


describe('use async test' () => {
    it('asyc-await, catch', asyc () => {
        function p() {
            return new Promise((resolve, reject) => {
                setTimeout(() => {
                    reject(new Error('error))
                }, 1000)
            })
        }

        try {
            await p();
        } catch(error) {
            expect(error).toBeInstanceOf(Error)
        }
    })
})

