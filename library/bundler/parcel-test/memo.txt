# parcel
- 설치 및 셋팅
1. npm install parcel-bundler
2. package.json
    "scripts": {
        "dev": "parcel index.html",
        "build": "parcel build index.html"
    }

- npm run dev
1. 필요한 라이브러리 자동 설치
2. 진입 파일을 자동으로 build하고 dist폴더를 생성하여 build된 파일을 저장한다

- favicon
index.html과 같은 경로에 favicon.ico가 존재하여도 적용되지 않은 것을 확인할 수 있다
 -> 실제 웹에서 확인하는 파일은 dist/index.html이며 root경로의 index.html은 dist/index.html을 만들어내는 용도이다
    따라서 dist폴더 경로에 favicon.ico가 존재해야 한다
favicon.ico를 dist폴더에 직접 넣게 되면 dist폴더를 새롭게 생성하거나 지우기 어렵다
 -> 개발 서버를 열때 dist폴더에 필요한 파일을 직접 넣어주는 패키지 이용
 -> parcel-plugin-static-files-copy
     -> npm install -D parcel-plugin-static-files-copy
     -> package.json
          "staticFiles": {
                "staticPath": "static"   : static폴더 안의 파일을 개발 서버 실행 시 dist폴더에 삽입해준다
            }
     -> 개발 서버 실행하면 dist폴더 안에 favicon.ico가 생성되어 있다

- 동작원리
애셋트리 -> 번들트리 -> 패키징
 1. 애셋 트리
 애셋이 분석되면 애셋의 의존요소가 추출되고 최종적인 컴파일 형태로 변환
 2. 번들트리
 진입 애셋을 위한 번들 코드분할을 발생시키는 다이나믹 import를 위한 하위번들, 다른 유형의 애셋이 import될때 만들어 지는 형제 번들
 하나 이상의 번들에서 애셋이 필요하게 되면 번들 트리 내 가장 가까운 공통 조상번들로 끌어 올려진다
 3. 패키징
 각 번들은 패키저에 의해 특정 유형의 파일로 작성


# CLI(커맨드 라인 안터페이스)
parcel bundler를 통해 입력할 수 있는 CLI
1. serve
개발용 서버를 시작함
parcel index.html
2. build
제품화할때
parcel build index.html

* CLI
터미널에서 작성하는 명령어

옵션
1. build한 파일을 저장하는 디렉토리 변경
기본값: dist
parcel build index.htnl --out--dir build/output
-> build한 결과물을 build/output에 저장하도록옵션 변경
2. port
기본값: 1234
parcel serve index.html --port 1111
-> 1111 port로 개발서버 실행
3. 브라우저에세 열기
기본값: 비활성화
parcel index.html --open
-> 개발서버실행하면 자동으로 브라우저 열림
4. HMR(hot module replacement)
런타입에 새로고침없이 수정된 내용을 자동으로 갱신하는 방식
기본값: 활성화
parcel index.html --no--hmr
-> hmr 비활성화
5. 캐시 비활성화
기본값: 캐시 활성화
parcel build index.html --no-cache
-> cache 비활성화


# assets
parcel은 assets을 기반으로 한다
assets파일 안의 참조에서 자동으로 의존성을 분석하고 출력 번들러에 포함시킨다
-> 이때 비슷한 유형의 assets은 같은 출력 번들러로 그룹화
   다른 유형의 assets은 자식 번들을 만들고 부모 번들에게 참조를 남긴다

1. javaScript
- commonJS 모듈 구문, ES6모듈 구문, 다이나믹 import 모두 지원

  const dep = require("./path/to/dep") // commonJS
  import dep from "./path/to/dep" // es6

2. css
- @import 구문, URL()함수를 통해 import
  /* 다른 CSS 파일 임포트 */
  @import './other.css';

  .test {
    /* 이미지, 폰트 파일 참조 */
    background: url('./images/background.png');
  }

3. scss
- sass모듈을 설치해 컴파일이 가능해지면 js파일에 import할 수 있다

4. html
- 주로 parcel의 진입 파일로 사용
- 스크립트, 스타일, 미디어, 다른 html파일을 참조할 수 있다

  <!-- 이미지 파일 참조 -->
  <img src="./images/header.png">

  <a href="./other.html">다른 페이지로 연결</a>

  <!-- 자바스크립트 번들 임포트 -->
  <script src="./index.js"></script>

* assets
js, css, html과 같은 파일


# 변환
대부분의 번들러들이 assets 변환을 위한 플러그인 설치 및 설정을 요구한다
parcel은 많은 변환과 트랜스파일러를 내장하여 지원한다
-> babel, postcss, postHTML을 변환할 수 있다
   parcel은 모듈안에 설정파일(.babelrc, .postcssrc)를 발견했을때 자동으로 변환을 실행
   ( "."로 파일명을 시작하면 구성옵션, 숨김파일을 의미한다 )

1. babel
- 설치 
npm i -D @babel/core @babel/preset-env

- 설정
.babelrc.js
module.exports = {
    presets: ['@babel/preset-env']
}
=> 작성된 자바스크립트 파일은 모두 babel을 통해 es5로 변경되어 브라우저에 동작

package.json
browerslist 추가

- babel의 기본설정만으로 async await 문법을 해석할 수 없다
  -> 별도의 패키지가 필요하다
     1. npm i -D @babel/plugin-transform-runtime
     2. .babelrc.js
         plugins: [
           ['@babel/plugin-transform-runtime']
         ] 

* babel
es6 최신 문법이 동작하지 않는 구형 브라우저에서 es6가 동작할 수 있도록 babel이 이전 버전으로 변환(컴파일)해준다

2. postcss
- 설치 
npm i autoPrefixer postcss-modules

- 설정
package.json
"browerslist": [
  "> 1%", // 전 세계 점유율이 1% 이상인 브라우저
  "last 2 versions" // 최근 2개 버전을 지원
]

.postcssrc.js (또는 postcss.config.js)
{
  "modules": true,
  "plugins": {
    "autoprefixer": {
      "grid": true
    }
  }
}

- CSSModules
CSS Modules은 .postcssrc.js의 최상위 modules 키를 사용하여 약간 다른 방식으로 활성화 됩니다. 
CSS Modules 은 JavaScript 번들에 포함될 객체를 내보내므로 Parcel 로 하여금 특별한 지원을 필요로 하기 때문입니다. 
postcss-modules가 프로젝트 안에 설치되어야 함을 주의

* autoPrefixer
css기술에 vender prefix를 자동으로 븥여주는 패키지

* 공급 업체 접두사 (vender prefix)
웹 표준이 만들어지기 전에 각 브라우저를 만드는 회사(vender사)에서 권고한 기술 
예) display: webkit-box  display: ms-flexbox
표준 기술이 동작하지 않는 구형 브라우저에서는 위 기술이 동작

* postcss
css를 변환하는 도구
예) autoprefixer, preset Env, CSSModules

3. typeScript
추가적인 설정없이 변환 가능하다