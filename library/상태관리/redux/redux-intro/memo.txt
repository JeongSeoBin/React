# Redux
- 전역 데이터를 효과적으로 관리하는 라이브러리
- 단일 스토어이다
- 전역 데이터를 가지고 있는 스토어가 있으며 스토어 안의 상태가 변경되면 스토어 데이터를 사용하고 있는 컴포넌트들이 재랜더링된다

- 스토어 만들기 (redux)
1. 액션 정의
2. 액션을 사용하는 리듀서 정의
3. 리듀서들 합치기
4. 최종 합쳐진 리듀서를 인자로 단일 스토어 생성

- 스토어 사용하기 (react-redux)
1. connect함수를 이용해서 컴포넌트에 연결


# action
- 객체이다
- 스토어의 상태를 변경하는 용도로 사용
- {type: '', [params: ]}
  - type만 필수 프로퍼티이다
  - 상태를 변경하는데 필요한 프로퍼티가 있으면 추가 (params)
- action creator 함수로 액션을 생성한다
  이 함수는 액션 객체를 리턴한다
  함수 당 하나의 액션을 만들어낸다


# reducer
- 액션을 주면 그 액션이 적용되어 달라진(안 달라진) 결과를 만들어 줌
- pure function
  같은 인풋이라면 같은 아웃풋을 주는 함수
- immutable
  original state와 새로운 state는 별도의 객체로 만들어져야 한다
  리덕스가 state가 달라졌음을 리듀서를 통해 immutable 방식으로 인지하기 때문
- 
    function reducer(prevState, action) {
        return newState
    }
    액션을 받아서 state를 리턴하는 구조
    인자로 들어 오는 prevState와 리턴되는 newState는 다른 참조를 가져야한다
  

# store
- createStore(reducer, initial state, enhancer)
- store 내장함수
    store.getState()
    : store 상태 반환
    store.dispatch(액션), store.dispatch(액션 생성자)
    : 액션 발생, reducer에 정의된 액션에 따라 store상태 변경
    const unsubscribe = store.subscribe(() => {store 변경 시 실행할 내용...})
    : 함수 내 store의 상태가 변경됐을때 실행할 코드 작성
      unsubscribe() 함수를 리턴한다
      unsubscribe()를 실행하면 store의 상태가 변경되어도 subscribe()에 지정한 함수실행 안한다 

