flux => redux, zustand
atomic => jotai, recoil
proxy => mobx, valtio, overmind

* flux
데이터의 흐름이 단방향으로 흐르는 구조
action -> dispatcher -> store -> view
store에 모든 상태를 저장하는 중앙집중방식
이 store는 외부 요소이기 떄문에 리액트 내부 스케줄러에 접근할 수 없다

# redux 사용시 문제점
- 비동기 처리를 위해서는 별도의 라이브러리가 필요
- 보일러플레이트 코드가 많다
   - 유지보수에는 장점
   - 꼭 필요한 간단한 기능인데, 반복적인 코드를 필요로 하며, 이것이 중복되어 많은 양의 코드를  양산하는 것
- 프로젝트 규모가 크고 유지보수와 확장성을 고려해야한다면 redux를 계속 사용하는 것이 좋을 것 같다

# react hook
- context API
- useReducer
- 대부분의 상태관리 해야할 것들이 response 데이터라면 swr이나 react-query

# recoil
- 페이스북에서 만든 상태관리 라이브러리
- 버전이 낮기 때문에 안정성 측면에서 좋지 않아 대규모 프로젝트에는 적합하지 않다
- context API기반으로 구현, 함수형 컴포넌트에서만 사용 가능
- atom에서 selector을 거쳐 컴포넌트까지 전달되는 하나의 data-flow를 가지고 있다
- selector에서 동기/비동기적으로 상태를 변환할 수 있다
- 비동기 데이터를 Loadable 객체로 변환이 가능
- 동시성 모드 지원
  비동기 selector를 만들고 suspense로 감싸 동시성 모드를 구현
- 캐싱 지원
  selector를 통해 비동기 작업을 진행할때 사용되는 atom에 자동으로 의존성이 걸리게 된다
  즉, atom의 값이 변경될때마다 selector가 변경되는데 atom의 값이 같으면 내부적으로 반환값을 메모이즈하고 있어 캐싱된 값을 반환한다
  * 메모리 사이즈 확인
  * 성능 최적화 확인

# zustand
- redux를 축소화시킨 상태 라이브러리
- 한개의 중앙에 집중된 형식의 스토어 구조를 활용
- 상태 변경 시 불필요한 리랜더링을 일으키지 않도록 제어하기 쉽다
- 자주 바뀌는 상태를 직접 제어할 수 있는 방법 제공 (Transient Update)

# mobx
- typescript가 base인 라이브러리
- 비동기 과정에서 데이터를 변경하고 싶을때 mobx시스템이 변경사항을 찾아 내고 사용 중인 곳에 전달
- 데이터의 모든 변경과 사용은 런타임에 추적되고 상태와 출력 사이의 의존트리를 만든다
  - 상태에 따라 필요할때만 연산을 진행하여 별도의 최적화 작업이 필요없다
- store가 여러개 될 수 있다
  분리가 용이
  최상위 스토어를 만들고 props로 공유해가는 방식
  상태 변경시 다수의 스토어가 영향을 받을 수 있다
  액션의 발행없이 업데이트할 수 있는데 이는 구현이 쉽고 용이하지만 테스트나 유지보수 측면에서 문제를 일으킬 수 있다
- ui 프레임워크 밖에서 상태를 관리할 수 있다
  - 코드 분리가 쉽고 테스트하기 유용하다




