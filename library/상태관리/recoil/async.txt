https://recoiljs.org/ko/docs/guides/asynchronous-data-queries

selector는 비동기 데이터를 recoil의 데이터 플로우 그래프에 포함하는 방법 중 하나

# Synchronous 
const currentUserIdState = atom({
    key: 'CurrentUserId',
    default: 1
})

const currentUserNameState = selector({
    key: 'CurrentUserName',
    get: ({get}) => {
        return tableOfUsers[get(currentUserIdState)].name;
    }
})

function CurrentUserInfo() {
    const userName = useRecoilValue(currentUserNameState);
    return (<div>{userName}</div>)
}

function App() {
    return (
        <RecoilRoot>
            <CurrentUserInfo/>
        </RecoilRoot>
    )
}

# Asynchronous 쿼리 데이터
만약 유저 이름이 데이터베이스에 저장되어 있다면..
promise를 리턴하거나 async함수를 사용하면 된다

const currentUerNameQuery = selector({
    key: 'CurrentUserName',
    get: async ({get}) => {
        const res = await DBQuery({
            userId: get(currentUserIdState)
        })

        if(res.error) {
            throw res.error
        }

        return res.name;
    }
})

// 컴포넌트에서는 selector를 그대로 사용하면 된다
function CurrentUserInfo() {
    const userName = useRecoilValue(currentUerNameQuery);
    return (<div>{userName}</div>)
}

// 동기인 react render에서 비동기 처리가 완료되지 않았을때 무엇을 랜더하냐 -> suspense
// 요청에 에러가 발생한다면 -> selector에서 error를 던지고 컴포넌트에서 <ErrorBoundary>로 잡을 수 있다
function App() {
    return (
        <RecoilRoot>
            <ErrorBoundary>
                <React.Suspense fallbak={<div>Loading...</div>}>
                    <CurrentUserInfo/>
                </React.Suspense>
            </ErrorBoundary>
        </RecoilRoot>
    )
}

# 매개변수가 있는 쿼리
상태를 기반이 아닌 컴포넌트 props를 기반으로 쿼리를 하고 싶을때 -> selectorFamily

const userNameQuery = selectorFamily({
    key: 'UserName',
    // 넘어온 userId를 받아서 id에 해당하는 이름을 db에서 찾는다
    get: (userId) => async () => {
        const res = await DBQuery({userId})

        if(res.error) {
            throw res.error
        }

        return res.name;
    }
})

function UserInfo({userId}) {
    // selectorFamily에게 props로 넘겨받은 userId를 전달한다
    const userName = useRecoilValue(userNameQuery(userId))
    return <div>{userName}</div>
}

function App() {
    return (
        <RecoilRoot>
            <ErrorBoundary>
                <React.Suspense fallback={<div>Loading...</div>}>
                    // userId를 props로 전달한다
                    <UserInfo userID={1} />
                    <UserInfo userID={2} />
                    <UserInfo userID={3} />
                </React.Suspense>
            </ErrorBoundary>
        </RecoilRoot>
    )
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

# Data-Flow Graph
쿼리를 selector로 모델링하면 상태와 파생된 싱태, 쿼리를 혼합한 데이터 플로우 그래프를 만들 수 있다

최근 유저의 이름과 그들의 친구 리스트를 렌더. 만약 친구의 이름이 클릭되면, 그 이름이 최근 유저가 되며 이름과 리스트는 자동적으로 업데이트

const currentUserIdState = atom({
    key: 'currentUserId',
    default: null
})

// userId를 받아서 해당 유저정보 리턴
const userInfoQuery = selectorFamily({
    key: 'userInfoQuery',
    get: (userId) => async () => {
        const res = await DBQuery({userId})

        if(res.error) {
            throw res.error
        }

        return res;
    }
})

// 최근 유저의 정보 리턴
const currentUserInfoQuery = selector({
    key: 'currentUserInfoQuery',
    get: ({get}) => get(userInfoQuery(get(currentUserIdState)))
})

// 최근 유저 정보에서 친구리스트를 얻고 친구들의 아이디에 해당하는 정보 리턴
const friendsInfoQuery = selector({
    key: 'friendInfoQuery',
    get: ({get}) => {
        const {friendList} = get(currentUserInfoQuery);
        return friendList.map(friendId => get(userInfoQuery(friendId)))
    }
})

function CurrentUserInfo() {
    const currentUser = useRecoilValue(currentUserInfoQuery);
    const firends = useRecoilValue(friendInfoQuery);
    const setCurrentUserId = useSetRecoilState(currentUserIdState);

    return (
        <div>
            <h1>{currentUser.name}</h1>
            <ul>
                {friends.map(friend => (
                    <li onClick={() => {setCurrentUserId(friend.id)}}>{friend.name}</li>
                ))}
            </ul>
        </div>
    )
}

function App() {
    return (
        <RecoilRoot>
            <ErrorBoundary>
                <React.Suspense fallback={<div>Loading...</div>}>
                   <CurrentUserInfo/>
                </React.Suspense>
            </ErrorBoundary>
        </RecoilRoot>
    )
}


# conCurrent request
위 예제에서
const friendsInfoQuery = selector({
    key: 'friendInfoQuery',
    get: ({get}) => {`
        const {friendList} = get(currentUserInfoQuery);
        return friendList.map(friendId => get(userInfoQuery(friendId)))
    }
})
=> map을 이용하여 친구들의 정보를 가져오는 것으 직렬화
   검색이 빠르다면 괜찮지만 자원을 많이 사용한다면 concurrent helper를 사용하여 병렬로 돌린다 (waitForAll)

   * waitForAll: 여러 비동기 종속성을 동시에 평가할 수 있는 concurrent helper
                 selector로 제공되기 떄문에 recoilstare가 사용되는 모든 곳에서 사용할 수 있다

const friendsInfoQuery = selector({
    key: 'friendInfoQuery',
    get: ({get}) => {
        const {friendList} = get(currentUserInfoQuery);
        const friends =  get(waitForAll(friendList.map(friendId => get(userInfoQuery(friendId)))))

        return friends;
    }
})


# React Suspense를 사용하지 않은 비동기 쿼리
useRecoilValueLoadable() hook을 사용하여 렌더링 중 상태를 확인할 수 있다

* useRecoilValueLoadable
  비동기 selector의 값을 읽기 위해 사용
  useRecoiilValue()와 다른게 비동기 selector를 읽을때 error혹은 promise를 던지지 않습니다
  대신 Loadable객체를 리턴합니다
  * Loadable
    recoil atom 혹은 selector의 최신 상태를 대표
    이 상태는 사용가능한 값, 에러 상태, 비동기 해결 보류 상태 중 하나

    Loadable은 state, contents를 갖습니다
        state: atom 혹은 selector의 최신 상태. 'hasValue', 'hasError', 'loading' 중 하나
        contents: hasValue라면 실제 값
                  hasError라면 error 객체
                  loading이라면 toPromise()를 통해 prmise객체를 얻을 수 있다

                  * toPromise()
                    selector가 resolve되면 resolve될 Promise 를 리턴
                    selector가 동기이거나 이미 resolve된 상태라면, 즉시 resolve 되는 Promise 를 리턴

function UserInfo({userId}) {
    const userNameLoadable = useRecoilValueLoadable(userNameQuery(userId));

    switch(userNameLoadable.state){
        case 'hasValue':
            return <div>{userNameLoadable.contents}</div>
        case 'loading':
            return <div>Loading...</div>
        case 'hasError'
            throw userNameLoadable.contents
    }
} 