# mobx
- 데코레이터를 적극 활용한다
- 스토어에 필요한 부분과 리액트에 필요한 부분이 있다
  npm i mobx -D
  npm i mobx-react -D

- event ----------> action ----------> observable state ----------> computed values ---------> side effects (like render)
                            update                        notify                      trigger(compute values에 변경사항이 있으면)


# mobx decorator 설정하기
- cra에 decorator를 설정하려면 별도의 설정이 필요하다
  eject를 하지 않고 패키지를 설정 -> customize-cra

  * customize-cra
    eject를 하지 않고 패키지를 설정할 수 있는 라이브러리
    npm install customize-cra react-app-rewired -D

  1. config-overrides.js 파일 작성
  2. package.json에서 scripts의 statr,build,test의 "react-scripts" 수정 -> "react-app-rewired"
  3. jsconfig.json 파일
  4. ctrl+shift+p -> reload window
  5. decorator test
     - npm install autobind-decorator
     - Button.jsx 작성, @autobind 사용

- cra의 template이 typescript일때 decorator 사용하기
  1. npx create-react-app mobx-ts-test --template typescript
  2. 별도의 설정 필요없이 바로 decorator 설치 후 사용할 수 있다
     npm install autobind-decorator
  3. tscongig.json
     "experimentalDecorators": true 추가


# observable
관찰이 가능한 대상
observable로 만들어진 value는 관찰이 가능한 대상이 되고 이 value에 변화가 생기면 observer가 다시 실행
proxy객체를 사용하기 때문에 observable을 기본동작으로 변경만 하여도 자동으로 인식하여 observer를 다시 실행한다
* proxy: 기본적인 동작(속성 접근, 할당, 순회, 열거, 함수 호출, ...)에 새로운 동작을 정의할때 사용

(index.js 참조)
- observable(<value>) 방식
  함수처럼 사용하는 방법
- @observable
  데코레이터롤 사용하는 방법
  클래스 내부 property에 @observable 붙여서 사용
  한 클래스안에 여러 @observable 존재


# observer
observable이 변경되었을때 observer컴포넌트가 다시 랜더

(App.js 참조)
- observer(<컴포넌트>)
  함수형 컴포넌트에 사용
- 클래스 컴포넌트에 @observer 붙여서 사용
  클래스 컴포넌트에 사용


# observable(store) 전역에서 관리
- 최상위 컴포넌트에서 store를 props를 전달하거나 context로 관리하면 하위 컴포넌트들에서 이를 이용하여 재랜덩 로직을 구성할 수 있다
- 직접 context처리를 하여도 되고 react-mobx에서 제공하는 provider를 이용해도 된다
  - 직접 context 처리
    1. context 생성 (/contexts/PersonContext)
    2. store 생성 (/stores/PersonStore)
      observable() 혹은 @observable로 store(observable) 생성
    3. <Context.Provider> (index.js)
      최상위 컴포넌트에서 하위 컴포넌트들을 <Context.Provider>로 감싼다
      value에 store를 주입한다
    4. context consumer (app.js)
      observer() 혹은 @observer로 생성된 컴포넌트에서 context를 consumer한다
      즉, 전역에서 관리하는 observable(store)를 가져와 관찰하면서 변경이 일어나면 재랜더링

      - 함수형 컴포넌트에서 context consumer
      - 클래스 컴포넌트에서 context consumer

  - provider & inject 이용
    1. provider에 props로 넣는다 (index.js)
    2. inject를 통해 props로 받아 꺼내쓴다 (App.js)
      - 함수형 컴포넌트에서 inject사용하는 방법
      - 클래스 컴포넌트에서 inject사용하는 방법
     

# computed
- event ----------> action ----------> observable state ----------> computed values ---------> side effects (like render)
                            update                        notify                      trigger(compute values에 변경사항이 있으면)

- observable state 변경이 일어났을때 바로 observable state를 렌더하는 것이 아님
- observable state 변경이 일어났을때 computed value(랜더에 변화를 일으키는 항목)에 notify하고 컴포넌트에서는 computed value 상태가 변경이 되었을때 렌더
- 실제 컴포넌트에서 사용하는 값들에 사용하면 최소 범위로 변경할 수 있다(예를 들어 40살이 넘었을때 값을 올릴때만 재랜더링하려고 할때)
- 내부적으로 고도의 최적화
  - 계산에 사용할 observable값이 변경되지 않으면 재실행하지 않음
  - 다른 computed 또는 reaction에 의해 호출되지 않으면 재실행하지 않음
  - observable이 변했는데 computed가 변하지 않을때 랜더하지 않음

- computed 사용방식
  - computed(내부에서 observable을 사용하는 함수)
    - observe에서 사용
  - observable클래스의 getter에 @computed 달아서 처리 (PersonStore.js App.js)
    - 스토어에서 사용


# action
- action을 사용하지 않으면 observable의 한 요소가 변경될때마다 리랜더링이 일어나게 된다
이를 방지하기 위해서 action을 사용하게 된다

(App.js PersonStore.js 참조)
- action()을 이용하는 방법
- runInAction()을 이용하는 방법
- @action을 이용하는 방법


# container를 이용
Container에서 위와 같은 방법으로 provider로 부터 데이터를 전달받고 실제 ui컴포넌트인 app에 props로 전달한다


# 여러 store 이용하기
- 여러 store를 생성한다
- rootStore를 생성한다
  각 store의 객체를 가지고 있는 store
  최상위 컴포넌트에서 context, provider를 통해 하위 컴포넌트들에게 전달
- container를 생성한다
  context, provider로부터 전달받은 store를 처리 후 ui컴포넌트에게 props로 전달한다
- ui 컴포넌트를 생성한다
  props로 전달받은 데이터를 화면에 랜더링한다

- 각 store끼리 데이터 전달
각 store에서 rootStore를 통해 다른 store에 접근해야 한다
rootStore에서 각각의 store 객체를 생성할때 자기자신 객체를 인수로 넘긴다
  constructor() {
    this.todoStore = new TodoStore(this);
    this.personStore = new PersonStore(this);
  }

각 store의 생성자에서 넘겨받은 rootStore를 가지고 생성자를 작성한다
  constructor(rootStore) {
    makeObservable(this);
    this.rootStore = rootStore;
  }

다른 store에 접근해야한다면 rootStore를 통해 접근하다
  plus() {
    this.age++;
    this.rootStore.todoStore.todos = [];
  }
