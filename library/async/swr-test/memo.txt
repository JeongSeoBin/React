# SWR
- 데이터를 가져오는데 특화되어 있는 라이브러리
  const {data} = useSWR('/api/data', fetch)

- 포커싱하면 갱신된다
  axios는 한번 get으로 호출하면 다시 호출하지 않는 이상 이전의 데이터를 유지
  swr은 최초 한번만 호출해도 다른 곳으로 포커싱을 옮겼다가 다시 포커싱하면 새로운 데이터로 갱신된다

- 주기적인 호출이 가능하다
  웹소켓을 이용하지 않고 데이터를 주기적으로 동기화할 수 있는 방법
  사용자의 설정에 따라 원하는 순간에 revalidate할 수도 있고 일정 시간 간격으로 revalidate할 수도 있다
  const {data, revalidate} = useSWR('/api/v1/users', fetch, {
      refreshInterval: 1000
  })

- 캐시된 데이터를 이용한다
  데이터를 가져오는데 오래 걸리는 호출이 있다고 가정했을때
  swr은 최초에 데이터를 수집한 후에는 캐시된 데이터를 이용해서 효율적인 동작을 만들어낸다
  캐시 이후에는 자동적으로 revalidate

- useEffect에서 사용한 것처럼 작동한다
    export default function myApp() {
        const { data } = useSWR('/api/v1/users', fetch);
        
        // 이거랑 똑같다.
        const [date, setDate] = useState(null);
        
        useEffect(() => {
            const response = axios.get('/api/v1/users');
            setDate(response.data);
        }, []);
    
        return ( ... )
    }


# Rest API
- fetcher 함수
const fetcher = (url) => fetch(url).then(res => res.json);
const fetcher = url => axios.get(url).then(res => res.data);

- useSWR
function useUser (id) {
  const { data, error } = useSWR(`/api/user/${id}`, fetcher)

  return {
    user: data,
    isLoading: !error && !data,
    isError: error
  }
}

function Avatar ({ id }) {
  const { user, isLoading, isError } = useUser(id)

  if (isLoading) return <Spinner />
  if (isError) return <Error />
  return <img src={user.avatar} />
}

swr요청을 재사용할 수 있게 hook으로 작성한다
data와 error값을 사용해 현재 요청 상태를 알아내고 해당 ui를 반환할 수 있다

전통적으로 최상위 컴포넌트의 useEffect에서 데이터를 한번 가져오고 이를 props로 하위컴포넌트에게 전달한다
하지만 swr을 이용하면 데이터가 필요한 하위컴포넌트에서 위에서 만든 hook을 통해 데이터를 얻는다
모든 부모 컴포넌트은 데이터나 데이터 전달에 관련된 것들을 알 필요없다

이는 swr 요청이 자동으로 중복제거, 캐시, 공유되므로 한버의 요청만 api로 요청되기 때문에 가능
사용자 포커스나 네트워크 제연결 시에 데이터를 갱신